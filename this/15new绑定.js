// 在传统的面向类的语言中，“构造函数”是类中的一些特殊方法，使用 new 初始化类时会调用类中的构造函数。通常的形式是这样的： 
something = new MyClass(
    // ...
);

// JavaScript也有一个 new 操作符，使用方法看起来也和那些面向类的语言一样，绝大多数开发者都认为 JavaScript 中 new 的机制也和那些语言一样。
// 然而，JavaScript 中 new 的机制实际上和面向类的语言完全不同。

// 首先我们重新定义一下 JavaScript 中的“构造函数”。在 JavaScript 中，构造函数只是一些 使用 new 操作符时被调用的函数。
// 它们并不会属于某个类，也不会实例化一个类。实际上， 它们甚至都不能说是一种特殊的函数类型，它们只是被 new 操作符调用的普通函数而已。

/**
 * 使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：
 * 1. 创建（或者说构造）一个全新的对象。 
 * 2. 这个新对象会被执行 [[ 原型 ]] 连接。 
 * 3. 这个新对象会绑定到函数调用的 this。 
 * 4. 如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。
 */

// 我们现在关心的是第 1 步、第 3 步、第 4 步，所以暂时跳过第 2 步
function foo(a) {
    this.a = a; 
}
var bar = new foo(2); 
console.log( bar.a ); // 2
// 使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。new 是最后一种可以影响函数调用时 this 绑定行为的方法，我们称之为 new 绑定。